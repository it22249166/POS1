/**
 * Generic method to generate a list of method calls on partitions of the data

 * @param fn
 * @param chunkSize
 * @param concurrency
 * @param data
 * @param args
 */
export declare function generateChunkedCalls(fn: (data: any[], ...args: any) => any, chunkSize: number, concurrency: number, data: any[], ...args: any[]): IterableIterator<any>;
/**
 * Main wrapper which returns an array of responses for each indvidual call
 * @param fn main processing function that needs to be applied to chunks of the array
 * @param chunkSize size of each chunk that will be processed by 1 fn instance
 * @param concurrency how many concurrent executions of 'fn' will run
 * @param data the data array which will be chunked and passed to fn
 * @param args any optional arguments that will be passed to each execution of fn
 *
 * Same return as Promise.all: an array wrapped in a promise
 */
export declare const concu: (fn: (data: any[], ...args: any) => any, chunkSize: number, concurrency: number, data: any[], ...args: any[]) => Promise<any[]>;
